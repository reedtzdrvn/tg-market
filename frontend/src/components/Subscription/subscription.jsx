import { useEffect, useState } from "react";
import { useSubscription } from "../../context/subscriptionContext";
import backgroundPayment from "../../images/backgroundPayment.png";
import calendar from "../../images/Calendar.svg";
import coins from "../../images/Coins.svg";
import { DarkButton, LightButton2 } from "../UI/Button/button";
import axios from "../../axios";
import { useUser } from "../../context/userContext";
import CryptoJS from 'crypto-js';

const Subscription = () => {
    const { subscription } = useSubscription();
    const [showPopup, setShowPopup] = useState(false);
    const [popupMessage, setPopupMessage] = useState('');
    const [price, setPrice] = useState(0);
    const [name, setName] = useState('');
    const { user } = useUser();
    const [payload, setPayload] = useState(false);
    const [subOn, setSubOn] = useState(false);

    // useEffect(() => {
    //     const script = document.createElement('script');
    //     script.src = "https://widget.payselection.com/lib/pay-widget.js";
    //     script.async = true;
    //     script.onload = () => console.log('PayWidget script loaded');
    //     document.body.appendChild(script);

    //     return () => {
    //         document.body.removeChild(script);
    //     };
    // }, []);

    useEffect(() => {
        if (subscription === null || new Date(subscription.dateExpression) < new Date()) {
            setSubOn(false); // Subscription is expired or does not exist
        } else {
            setSubOn(true);  // Subscription is active
        }
    }, [subscription]); // Add subscription to the dependency array

    // const generateSignature = (params, secretKey) => {
    //     const sortedParams = Object.keys(params).sort().map(key => `${key}=${params[key]}`).join('&');
    //     return CryptoJS.HmacSHA256(sortedParams, secretKey).toString(CryptoJS.enc.Hex);
    // };

    const handleGoSub = (name, price) => {
        setPrice(price);
        setName(name);
        setPopupMessage(`–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ ${name === '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' ? '–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ "3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ"' : `"` + `${name}` + `"`}. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–æ–º–Ω–∏–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞üëå`);
        setShowPopup(true);
    };

    const handleSubmit = () => {
        setShowPopup(false);
        pay();
    };

    const pay = function () {
        if (!window.pw) {
            console.error("PayWidget is not loaded");
            return;
        }

        // const secretKey = 'RUWLq9E4Ek9HDmN8';
        // const signature = generateSignature(params, secretKey);

        var widget = new window.pw.PayWidget();

        widget.pay(
            {
                serviceId: "20071",
                key: "045139ce4805a5d0c2f46f7f0844d1ff269dd869344bc82301a3eba0fb67eb56cb65c789a46c535d124d08d2e6348a86938494b561363c0a9b74958e24f4b2ea0d",
            },
            {
                MetaData: {
                    PaymentType: "Pay",
                },
                PaymentRequest: {
                    OrderId: String(Math.floor(Math.random() * (100000 - 1000) + 1000)),
                    Amount: String(price),
                    Currency: "RUB",
                    Description: `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${name}"`,
                },
            }
            , {
                onSuccess: function (res) {
                    handleSuccessfulPayment(name, res.returnUrl);
                },
                onError: function (res) {
                    handleErrorPayment();
                },
                onClose: function (res) {
                    window.location.reload();
                },
            });
    };
    
    const handleSuccessfulPayment = (name, returnUrl) => {
        let dateExpression = new Date();

        if (name === '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥') {
            dateExpression.setDate(dateExpression.getDate() + 3);
        } else if (name === '–ü—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü') {
            dateExpression.setMonth(dateExpression.getMonth() + 1);
        } else if (name === '–ü—Ä–µ–º–∏—É–º 3 –º–µ—Å—è—Ü–∞') {
            dateExpression.setMonth(dateExpression.getMonth() + 3);
        } else if (name === '–ü—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–µ–≤') {
            dateExpression.setMonth(dateExpression.getMonth() + 12);
        }

        const dateNow = new Date().toISOString();
        const dateExpressionISO = dateExpression.toISOString();

        axios.post('/subscription', {
            userId: user._id,
            nameSubscription: name,
            dateNow: dateNow,
            dateExpression: dateExpressionISO
        })
            .then(() => {
                setPayload(true);
                setPopupMessage(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É "${name}"`);
                setShowPopup(true);
            })
            .catch(error => {
                console.error('Error adding subscription:', error);
            })
    };

    const handleErrorPayment = () => {
        console.log('–æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã');
    };

    const handleExit = () => {
        setShowPopup(false);
    };

    const handleGoHome = () => {
        window.location.href = '/';
    };

    return (
        <div className="bg-back relative min-h-screen">
            {showPopup &&
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-md shadow-lg max-w-xs text-center">
                        <p className="text-lg font-semibold">{popupMessage}</p>
                        <div className="mt-4 flex flex-col gap-3 justify-around text-[18px]">
                            {payload && <LightButton2 onClick={() => handleGoHome()} text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" />}
                            {!payload && <>
                                <LightButton2 onClick={() => handleExit()} text="–û—Ç–º–µ–Ω–∞" />
                                <DarkButton onClick={() => handleSubmit()} text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" />
                            </>}
                        </div>
                    </div>
                </div>}
            <div className="absolute mt-[313px] mb-[112px] z-[1]">
                <img src={backgroundPayment} alt="backgroundPayment" />
            </div>
            <div className="relative z-[10] text-center px-[16px]">
                <div className="pt-[82px] font-bold text-[30px] text-center leading-9">
                    –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã
                </div>
                <div className="mt-[32px] leading-6">
                    –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                </div>
                <div className="mt-[67px] flex flex-wrap justify-center gap-[16px] mb-[98px]">
                    {subscription === null && <div className="rounded-[15px] px-[16px] py-[32px] bg-main shadow-custom flex-grow cartTarif flex flex-col">
                        <div className="font-bold text-center leading-[32px] text-[24px]">
                            –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={calendar} className="h-[18px]" alt="calendar" />3 –¥–Ω—è
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={coins} className="h-[18px]" alt="calendar" />–±–µ—Å–ø–ª–∞—Ç–Ω–æ
                        </div>
                        <div className="opacity-30 text-[16px] text-left mt-[15px] mb-[15px] flex-grow">
                            –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
                        </div>
                        {!subOn && <div className="flex flex-col justify-end h-full">
                            <DarkButton onClick={() => handleGoSub('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', 0)} text={"–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"} />
                        </div>}
                        {subscription?.nameSubscription === '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' && new Date(subscription.dateExpression) > new Date() && <div className="flex flex-col justify-end h-full">
                            –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription?.dateExpression.split('T')[0]}
                        </div>}
                    </div>}

                    <div className="rounded-[15px] px-[16px] py-[32px] bg-main shadow-custom flex-grow cartTarif flex flex-col">
                        <div className="font-bold text-center leading-[32px] text-[24px]">
                            –ü—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={calendar} className="h-[18px]" alt="calendar" />1 –º–µ—Å—è—Ü
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={coins} className="h-[18px]" alt="calendar" />990 –†
                        </div>
                        <div className="opacity-30 text-[16px] text-left mt-[15px] mb-[15px]">
                            990 –†/–º–µ—Å
                        </div>
                        {!subOn && <div className="flex flex-col justify-end h-full">
                            <LightButton2 onClick={() => handleGoSub('–ü—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü', 990)} text={"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"} />
                        </div>}
                        {subscription?.nameSubscription === '–ü—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü' && new Date(subscription.dateExpression) > new Date() && (
                            <div className="flex flex-col justify-end h-full">
                                –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription.dateExpression.split('T')[0]}
                            </div>
                        )}

                    </div>

                    <div className="rounded-[15px] px-[16px] py-[32px] bg-main shadow-custom flex-grow cartTarif flex flex-col">
                        <div className="font-bold text-center leading-[32px] text-[24px]">
                            –ü—Ä–µ–º–∏—É–º 3 –º–µ—Å—è—Ü–∞
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={calendar} className="h-[18px]" alt="calendar" />3 –º–µ—Å—è—Ü–∞
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={coins} className="h-[18px]" alt="calendar" />2 499 –†
                        </div>
                        <div className="opacity-30 text-[16px] text-left mt-[15px] mb-[15px]">
                            833 –†/–º–µ—Å
                        </div>
                        {!subOn && <div className="flex flex-col justify-end h-full">
                            <LightButton2 onClick={() => handleGoSub('–ü—Ä–µ–º–∏—É–º 3 –º–µ—Å—è—Ü–∞', 2499)} text={"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"} />
                        </div>}
                        {subscription?.nameSubscription === '–ü—Ä–µ–º–∏—É–º 3 –º–µ—Å—è—Ü–∞' && new Date(subscription.dateExpression) > new Date() && <div className="flex flex-col justify-end h-full">
                            –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription?.dateExpression.split('T')[0]}
                        </div>}
                    </div>

                    <div className="rounded-[15px] px-[16px] py-[32px] bg-main shadow-custom flex-grow cartTarif flex flex-col">
                        <div className="font-bold text-center leading-[32px] text-[24px]">
                            –ü—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–µ–≤
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={calendar} className="h-[18px]" alt="calendar" />12 –º–µ—Å—è—Ü–µ–≤
                        </div>
                        <div className="mt-[15px] flex items-center text-[16px] font-bold gap-[9px]">
                            <img src={coins} className="h-[18px]" alt="calendar" />6 999 –†
                        </div>
                        <div className="opacity-30 text-[16px] text-left mt-[15px] mb-[15px]">
                            583 –†/–º–µ—Å
                        </div>
                        {!subOn && <div className="flex flex-col justify-end h-full">
                            <LightButton2 onClick={() => handleGoSub('–ü—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–µ–≤', 6999)} text={"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"} />
                        </div>}
                        {subscription?.nameSubscription === '–ü—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–µ–≤' && new Date(subscription.dateExpression) > new Date() && <div className="flex flex-col justify-end h-full">
                            –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription?.dateExpression.split('T')[0]}
                        </div>}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Subscription;
